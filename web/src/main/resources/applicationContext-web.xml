<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>
    <context:component-scan base-package="com.navercorp.pinpoint.web.dao.hbase,
                                         com.navercorp.pinpoint.web.service,
                                         com.navercorp.pinpoint.web.mapper,
                                         com.navercorp.pinpoint.web.filter,
                                         com.navercorp.pinpoint.web.config,
                                         com.navercorp.pinpoint.web.view,
                                         com.navercorp.pinpoint.web.applicationmap,
                                         com.navercorp.pinpoint.common.server.bo,
                                         com.navercorp.pinpoint.common.server.util" />

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:hbase.properties</value>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>
    
    <bean id="pinpointWebProps" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="location" value="classpath:pinpoint-web.properties"/>
        <property name="fileEncoding" value="UTF-8"/>
    </bean>
    
    <import resource="classpath:applicationContext-hbase.xml" />
    <import resource="classpath:applicationContext-datasource.xml" />
    <import resource="classpath:applicationContext-dao-config.xml" />
    <import resource="classpath:applicationContext-cache.xml" />
    <import resource="classpath:applicationContext-websocket.xml" />
    <import resource="classpath:applicationContext-web-namespace.xml"/>

    <bean id="jsonObjectMapper" class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
    </bean>
    
    <bean id="rangeFactory" class="com.navercorp.pinpoint.web.vo.RangeFactory">
    </bean>

    <bean id="timeSlot" class="com.navercorp.pinpoint.common.util.DefaultTimeSlot">
    </bean>

    <bean id="config" class="com.navercorp.pinpoint.web.config.WebConfig">
    </bean>
    
    <bean id="commandHeaderTBaseSerializerFactory" class="com.navercorp.pinpoint.thrift.io.CommandHeaderTBaseSerializerFactory">
    </bean>

    <bean id="commandHeaderTBaseDeserializerFactory" class="com.navercorp.pinpoint.thrift.io.CommandHeaderTBaseDeserializerFactory">
    </bean>
    <bean id="agentEventHeaderTBaseDeserializerFactory" class="com.navercorp.pinpoint.thrift.io.AgentEventHeaderTBaseDeserializerFactory">
    </bean>

    <bean id="clusterConnectionManager" class="com.navercorp.pinpoint.web.cluster.connection.ClusterConnectionManager">
        <constructor-arg ref="config" />
    </bean>

    <bean id="clusterDataManager" class="com.navercorp.pinpoint.web.cluster.zookeeper.ZookeeperClusterDataManager">
        <constructor-arg ref="config" />
    </bean>

    <bean id="clusterManager" class="com.navercorp.pinpoint.web.cluster.ClusterManager">
        <constructor-arg ref="config" />
    </bean>

    <bean id="agentEventMessageDeserializer" class="com.navercorp.pinpoint.common.server.util.AgentEventMessageDeserializer">
        <constructor-arg>
            <list value-type="com.navercorp.pinpoint.thrift.io.DeserializerFactory">
                <ref bean="commandHeaderTBaseDeserializerFactory"/>
                <ref bean="agentEventHeaderTBaseDeserializerFactory"/>
            </list>
        </constructor-arg>
    </bean>

    <bean id="slf4jCommonLoggerFactory" class="com.navercorp.pinpoint.common.server.util.Slf4jCommonLoggerFactory">
    </bean>

    <bean id="typeLoaderService" class="com.navercorp.pinpoint.common.service.DefaultTraceMetadataLoaderService">
    </bean>

    <bean id="serviceTypeRegistryService" class="com.navercorp.pinpoint.common.service.DefaultServiceTypeRegistryService">
        <constructor-arg ref="typeLoaderService"/>
        <constructor-arg ref="slf4jCommonLoggerFactory"/>
    </bean>

    <bean id="annotationKeyRegistryService" class="com.navercorp.pinpoint.common.service.DefaultAnnotationKeyRegistryService">
        <constructor-arg ref="typeLoaderService"/>
        <constructor-arg ref="slf4jCommonLoggerFactory"/>
    </bean>
    
    <bean id="spanServiceImpl" class="com.navercorp.pinpoint.web.service.SpanServiceImpl">
        <property name="sqlMetaDataDao" ref="hbaseSqlMetaDataDao"/>
    </bean>
    
    <bean id="hbaseSqlMetaDataDao" class="com.navercorp.pinpoint.web.dao.hbase.HbaseSqlMetaDataDao">
        <property name="rowKeyDistributorByHashPrefix" ref="metadataRowKeyDistributor2"></property>
        <property name="sqlMetaDataMapper" ref="sqlMetaDataMapper2"></property>
    </bean>

    <bean id="sqlMetaDataMapper" class="com.navercorp.pinpoint.web.mapper.SqlMetaDataMapper">
        <property name="rowKeyDistributorByHashPrefix" ref="metadataRowKeyDistributor"></property>
    </bean>
    
    <bean id="sqlMetaDataMapper2" class="com.navercorp.pinpoint.web.mapper.SqlMetaDataMapper">
        <property name="rowKeyDistributorByHashPrefix" ref="metadataRowKeyDistributor2"></property>
    </bean>

    <util:properties id="batchProps" location="classpath:batch.properties"/>

    <!-- add to load for batch spring configuration.we need to conditional logic to behave differently base on 'batch.enable' config value -->
    <bean id="batchConfiguration" class="com.navercorp.pinpoint.web.batch.BatchConfiguration"/>

    <bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                    <property name="objectMapper">
                        <bean class="com.fasterxml.jackson.databind.ObjectMapper"/>
                    </property>
                    <property name="supportedMediaTypes">
                        <list>
                            <value>text/json</value>
                            <value>application/json</value>
                        </list>
                    </property>
                </bean>
                <bean class="org.springframework.http.converter.FormHttpMessageConverter">
                    <property name="supportedMediaTypes">
                        <list>
                            <value>application/x-www-form-urlencoded</value>
                        </list>
                    </property>
                </bean>
                <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                    <property name="supportedMediaTypes">
                        <list>
                            <value>text/plain</value>
                            <value>text/html</value>
                        </list>
                    </property>
                </bean>
            </list>
        </property>
    </bean>

    <bean id="requestContextPropagatingTaskDecorator" class="com.navercorp.pinpoint.web.task.RequestContextPropagatingTaskDecorator"/>
    <bean id="securityContextPropagatingTaskDecorator" class="com.navercorp.pinpoint.web.task.SecurityContextPropagatingTaskDecorator"/>
    <bean id="contextPropagatingTaskDecorator" class="com.navercorp.pinpoint.web.task.ChainedTaskDecorator">
        <constructor-arg>
            <list>
                <ref bean="requestContextPropagatingTaskDecorator"/>
                <ref bean="securityContextPropagatingTaskDecorator"/>
            </list>
        </constructor-arg>
    </bean>

    <bean id="baseTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor" abstract="true">
        <property name="taskDecorator" ref="contextPropagatingTaskDecorator"/>
        <property name="daemon" value="true"/>
        <property name="waitForTasksToCompleteOnShutdown" value="true"/>
        <property name="awaitTerminationSeconds" value="10"/>
    </bean>

    <bean id="applicationsMapCreateExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor" parent="baseTaskExecutor">
        <property name="corePoolSize" value="#{pinpointWebProps['web.servermap.creator.worker.threadSize'] ?: 16}"/>
        <property name="maxPoolSize" value="#{pinpointWebProps['web.servermap.creator.worker.threadSize'] ?: 16}"/>
        <property name="queueCapacity" value="#{pinpointWebProps['web.servermap.creator.worker.queueSize'] ?: 1024}"/>
        <property name="threadNamePrefix" value="Pinpoint-Link-Selector-"/>
    </bean>

    <bean id="nodeHistogramAppendExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor" parent="baseTaskExecutor">
        <property name="corePoolSize" value="#{pinpointWebProps['web.servermap.appender.worker.threadSize'] ?: 16}"/>
        <property name="maxPoolSize" value="#{pinpointWebProps['web.servermap.appender.worker.threadSize'] ?: 16}"/>
        <property name="queueCapacity" value="#{pinpointWebProps['web.servermap.appender.worker.queueSize'] ?: 1024}"/>
        <property name="threadNamePrefix" value="Pinpoint-Node-Histogram-Appender-"/>
    </bean>

    <bean id="serverInfoAppendExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor" parent="baseTaskExecutor">
        <property name="corePoolSize" value="#{pinpointWebProps['web.servermap.appender.worker.threadSize'] ?: 16}"/>
        <property name="maxPoolSize" value="#{pinpointWebProps['web.servermap.appender.worker.threadSize'] ?: 16}"/>
        <property name="queueCapacity" value="#{pinpointWebProps['web.servermap.appender.worker.queueSize'] ?: 1024}"/>
        <property name="threadNamePrefix" value="Pinpoint-Server-Info-Appender-"/>
    </bean>
</beans>
